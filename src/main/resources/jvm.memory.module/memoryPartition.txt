JDK1.8
一.概览
JVM内存模型：
                    JVM数据区
           程序计数器         本地方法栈
           堆                java虚拟机栈
                    本地内存
           元数据区           直接内存

线程隔离：程序计数器、本地方法栈、java虚拟机栈
线程共享：堆、元数据区、直接内存

JDK1.8 将元数据区取代了永久代
元空间的本质和永久代类似，都是对JVM规范中方法区的实现。元空间和永久代之间最大的区别是：元数据空间不在虚拟机中，而是使用本地内存。

二.各区域介绍
1.程序计数器：
    每个线程一块，指向当前线程正在执行的字节码行号。如果当前线程执行的是native方法，则其值为null。
2.Java虚拟机栈
    线程私有，每个线程对应一个Java虚拟机栈，其生命周期与线程同进同退。每个Java方法在被调用的时候都会创建一个栈帧，并入栈。
一但完成调用，则出栈。所有的栈帧都出栈后，线程就完成了使命。
    栈帧：局部变量表、操作数栈、动态链接、方法出口信息
    局部变量表：八大原始类型、对象引用、returnAddress
3.本地方法栈
    功能和Java虚拟机栈相似。区别：本地方法栈为虚拟机使用到的native方法服务。
4.堆
    JVM内存占用最大，管理最复杂。
    用途：存放对象引用，所有的对象实例及数组都在堆上进行分配。
    堆有自己进一步的内存分块划分
    按照GC分代收集角度的划分：
    老年代：三分之二的堆空间
    年轻代：三分之一的堆空间
        eden区：8/10的年轻代空间
        survivor0:1/10的年轻代空间
        survivor1:1/10的年轻代空间
5.元数据区
    对方法区的实现
    方法区存放：VM加载的类信息，静态变量，常量等数据。
6.直接内存
    NIO，可以使用Native函数库直接分配堆外内存。


